version: 2.1
orbs:
    slack: circleci/slack@4.1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            sudo npm install
            sudo npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - save_cache:
          paths: [frontend/dist]
          key: frontend-dist
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             sudo npm install
             sudo npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - save_cache:
          paths: [backend/dist]
          key: backend-dist  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
             cd frontend
             exit 0
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             cd backend
             sudo npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build"]  # -<< pipeline.id >>"
      - run:
          name: Font-end security scan
          command: |
            cd frontend
            npm audit --audit-level=critical
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     template: success_tagged_deploy_1
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]  # -<< pipeline.id >>"
      - run:
          name: Back-end security scan
          command: |
            cd backend
            npm audit --audit-level=critical
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     template: success_tagged_deploy_1 
  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --tags project=udapeople-backend-<< pipeline.parameters.workflow-id >> \
              --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>"
      - run:
          name: Save backend URL in memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-<<pipeline.parameters.workflow-id>>" \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: 3b9cb796-d840-441f-aa56-ee81244df30c" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL  
      - run:
          working_directory: ./.circleci/files
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --tags project=udapeople-frontend-<< pipeline.parameters.workflow-id >> \
              --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>"  
      # - run:
      #     working_directory: ./.circleci/ansible
      #     name: Add back-end ip to ansible inventory
      #     command: |
      #       aws ec2 describe-instances \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --filters "Name=tag:project,Values=udapeople-backend-<< pipeline.parameters.workflow-id >>" \
      #         --output text >> inventory.txt
      #       cat inventory.txt
      #       ls -la
      # - persist_to_workspace:
      #     root: .
      #     paths:
      #       - .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy_environment:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail      
workflows:
  default:
   jobs:
    - build-frontend
    - build-backend
    - test-frontend:
          requires: [build-frontend]
    - test-backend:
          requires: [build-backend]
    - scan-backend:
          requires: [build-backend]
    - scan-frontend:
          requires: [build-frontend]
    - deploy-infrastructure:
          requires: [test-frontend, test-backend]
          filters:
            branches:
              only: [test-feature-branch]